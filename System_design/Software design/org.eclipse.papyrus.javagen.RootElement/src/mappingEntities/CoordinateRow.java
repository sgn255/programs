// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package mappingEntities;

import java.util.Iterator;
import java.util.LinkedList;

import mappingEntities.Coordinate;

/************************************************************/
/**
 * 
 */
public class CoordinateRow implements Iterable<Coordinate> {
	/**
	 * 
	 */
	private LinkedList<Coordinate> coordinates;

	public CoordinateRow(){
		coordinates = new LinkedList<Coordinate>();
	}

	
	/**
	 * 
	 * @param coordinate 
	 */
	public void push(Coordinate coordinate) {
		this.coordinates.push(coordinate);
	}

	/**
	 * 
	 * @return 
	 * @param index 
	 */
	public Coordinate get(int index) {
		return coordinates.get(index);
	}
	
	public int size(){
		return coordinates.size();
	}

	public void set(int index, Coordinate x) {
		this.coordinates.set(index, x);
	}

	public boolean contains(Coordinate currentCoordinate) {
		return this.coordinates.contains(currentCoordinate);
	}

	public boolean hasRepeatingCoordinates() {
		if(coordinates.size() < 5){
			return false;
		}
		
		for(int i = 0; i < coordinates.size(); i++){
			for(int j = 0; j < coordinates.size(); j++){
				if(j == i){
					continue;
				}
				
				Coordinate a = coordinates.get(i);
				
				Coordinate b = coordinates.get(j);
//				//predecessor of b
//				Coordinate bP = coordinates.get(j - 1);
//				//successor of b
//				
//				if((j + 1) >= coordinates.size()){
//					return a.equals(b) && !b.equals(bP);
//				}else{
//					Coordinate bS = coordinates.get(j + 1);
//
//					return a.equals(b) && !b.equals(bP) && !b.equals(bS);
//				}
				if( a.equals(b)){
					return true;
				}
			}
		}
		return false;
	}
	
    @Override
    public Iterator<Coordinate> iterator() {
        return coordinates.iterator();
    }

};
