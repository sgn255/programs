// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package robots;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.LinkedList;

import javax.vecmath.Point3d;
import javax.vecmath.Vector2d;
import javax.vecmath.Vector3d;

import RootElement.FileServer;
import mappingEntities.Coordinate;
import mappingEntities.CoordinateRow;
import robots.RobotStatus;
import simbad.sim.Agent;
import simbad.sim.RangeSensorBelt;
import simbad.sim.RobotFactory;

/************************************************************/
/**
 * 
 */
public abstract class Robot extends Agent{

	/**
	 * 
	 */
	protected RangeSensorBelt sonarSensor;
	/**
	 * 
	 */
	protected RangeSensorBelt bumperSensor;
	/**
	 * 
	 */
	protected RobotStatus status;
	/**
				 * 
				 */
	protected FileServer fileServer;
	/**
	 * 
	 */
	protected CoordinateRow traversedPoints;

	protected PrintStream out;
	
	/**
	 * 
	 * @param position 
	 * @param name 
	 * @param fileServer 
	 */
	public Robot(Vector3d position, String name, FileServer fileServer) {
		super(position, name);
        
        out = new PrintStream(System.out);
        
        // Add bumpers
         bumperSensor = RobotFactory.addBumperBeltSensor(this, 12);
         
        // Add sonars
         sonarSensor = RobotFactory.addSonarBeltSensor(this, 4);     
         
         traversedPoints = new CoordinateRow();

	}

	/**
	 * 
	 * @param coordinate 
	 */
	protected void saveCoordinate() {
		Coordinate currentPosition = getCurrentCoordinate();
		this.traversedPoints.push(currentPosition);
	}

	protected double getFrontSonarMeasurement(){
    	return sonarSensor.getMeasurement(0);
    }
    
	protected double getRightSonarMeasurement(){
    	return sonarSensor.getMeasurement(3);
    }
    
    protected double getBackSonarMeasurement(){
    	return sonarSensor.getMeasurement(2);
    }
    
    protected double getLeftSonarMeasurement(){
    	return sonarSensor.getMeasurement(1);
    }

	/**
	 * 
	 * @return 
	 */
    protected boolean robotFrontTooClose() {
		if(getFrontSonarMeasurement() < 0.5){
    		return true;
    	}
		return false;
	}


	protected Coordinate getCurrentCoordinate() {
		Point3d coord = new Point3d();
		this.getCoords(coord);
		return new Coordinate(coord); 
	}

	/**
	 * 
	 * @param angle 
	 */
	protected void rotate(double angle) {
		this.rotateY((2 * Math.PI * angle) / 360);
	}
};
